-------------------------------------------------
    Responsibilities of Execution
-------------------------------------------------

- loops through all the commands in the commandline
    - creates pipe if main->pipes > 0
    - creates fork
    - executes (or sets correct errno and exits that process)
        - checks here if command is a builtin or not
            - if builtin, call that builtins function to execute it and then exit that process
            - if 'normal' command, make sure to get the path and execute with execve
    - returns the last processes exit
    //basically pipex
    //we do not need to have firstchild, middlechild and lastchild right?

-------------------------------------------------
    Errors
-------------------------------------------------
- some error with infile
    - CASE: no read permission
        errno = 13 (EACCES)
        message = permission denied
        exit = 1
    - CASE: does not exist
        errno = 2 (ENOENT)
        message = no such file or directory
        exit = 1

- some error with outfile
    - CASE: is a directory
        - CASE: it exists
            errno = 21 (EISDIR)
            message = is a directory
            exit = 1
        - CASE: does not exist
            errno = 2 (ENOENT)
            message = no such file or directory
            exit = 1
    - CASE: no write permission
        errno =  errno = 13 (EACCES)
        message = permission denied
        exit = 1

- some error with command
    - CASE: command is empty string (i.e. "" or *cmd = '\0')
        errno = 127
        message = command not found
        exit = 127
    - CASE: command is a path
        - CASE: file exists
            - CASE: but is a directory (not executable)     //this does not work correctly in my pipex
                errno = 21 (EISDIR)
                message = is a directory
                exit = 126
            - CASE: but we do not have execute permission
                errno = 13 (EACCES)
                message = permission denied
                exit = 126
        - CASE: file does not exists
            errno = 2 (ENOENT)
            message = no such file or directory
            exit = 127
    - CASE: command is not a path (just a word)
        - CASE: but envp has been removed, i.e. path to that command can not be found
            errno = 2 (ENOENT)
            message = no such file or directory
            exit = 127
        - CASE: no path to such command can be found (i.e. command does not exist)
            errno = 127
            message = command not found
            exit = 127

-------------------------------------------------
    Questions
-------------------------------------------------

- so we will remove (*tokens)[i].redirect_heredoc = false; ?
    - and also heredoc delimiter, if it is done in parsing?
- how does execute know if outfile is STDOUT or a pipe? Same with infile?